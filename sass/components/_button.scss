
.btn {

  /*
  psuedo class special state of a selector,
  used to style classes under special
  conditions
  .btn:link - special state of a selector
  when it is an anchor element
  inline-block - Always used when wanting default
  heights, padding, and width added to elements
  "Implements box model"
  */
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    position: relative;
    border-radius: 10rem;

    /* transition property must be on
    initial state, by default */
    transition: all 0.5s;
    font-size: $default-font-size;
  }

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10rem 20rem rgba($color-black,.2);

    /*
    On hovering over the button, enable different styles
    */
    &::after {

      /*
      scale - change the size of the element
      */
      transform: scaleX(1.4) scaleY(1.6);

      opacity: 0;
      /* Put transition in inital state: '.btn::after' */
    }
  }

  &:active {
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba($color-black,.2);
  }

  &--white {
    background-color: #fff;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  /*
  Psuedo Elements - Allow for styling of specific
  parts of different elements (i.e. make first letter
  of word green)
                  - Make zoom out of white button to
  infinity
                  - Trick is to add an element exactly
  like the button that is already created and we want
  to alter, but put this element directly behind the
  button.  When we hover out of the button the Psuedo
  element goes back behind the button.  The psuedo
  element is effectively treated as a child of the
  button.
  */
  &::after {

    /* content and display property is always necessary
       for psuedo elements */
    content: "";
    display: inline-block;

    /* psuedo element '.btn::after' would have
       100% of the width of the button */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
  }

  /*
  New class created on button to implement button
  animation
  */
  &--animated::after {

    /*
    animation: 'animation_name' 'animation_duration'
    'animation_timing_function' 'animation_delay'
    */
    animation: moveInBottom .5s ease-out .75;

    /*
    b/c initially stays visibile and then animation
    starts, automatically applies styles at 0% before
    animation starts
    */
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all .2s;
  }

  &:hover {
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(-2px);
  }

  &:active {
    box-shadow: 0 .5rem 1rem rgba($color-black, .15);
    transform: translateY(0);
  }
}
