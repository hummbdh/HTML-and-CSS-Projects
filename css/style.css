/*
Normalize.css for modern look.  But browsers
are improved so really only need to use the
universal selector (US)
Use US to remove default margins and paddings
*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* partial sass file, used for basic definitions
   project boiler plate */
*,
*::after,
*::before {
  margin: 0px;
  padding: 0px;
  /* Use 'border-box' to change box model so
     that borders and paddings are not added to
     the height and width of element */
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

/*
   Create fonts, style body tag, inheritance
   will apply fonts to children of body tag
   */
body {
  box-sizing: border-box; }

/*
Create fonts, style body tag, inheritance
will apply fonts to children of body tag
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem;
  /* target everything except the last child */ }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.btn {
  /*
  psuedo class special state of a selector,
  used to style classes under special
  conditions
  .btn:link - special state of a selector
  when it is an anchor element
  inline-block - Always used when wanting default
  heights, padding, and width added to elements
  "Implements box model"
  */
  /*
  Psuedo Elements - Allow for styling of specific
  parts of different elements (i.e. make first letter
  of word green)
                  - Make zoom out of white button to
  infinity
                  - Trick is to add an element exactly
  like the button that is already created and we want
  to alter, but put this element directly behind the
  button.  When we hover out of the button the Psuedo
  element goes back behind the button.  The psuedo
  element is effectively treated as a child of the
  button.
  */
  /*
  New class created on button to implement button
  animation
  */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    position: relative;
    border-radius: 10rem;
    /* transition property must be on
    initial state, by default */
    transition: all 0.5s;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10rem 20rem rgba(0, 0, 0, 0.2);
    /*
    On hovering over the button, enable different styles
    */ }
    .btn:hover::after {
      /*
      scale - change the size of the element
      */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* Put transition in inital state: '.btn::after' */ }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* content and display property is always necessary
       for psuedo elements */
    content: "";
    display: inline-block;
    /* psuedo element '.btn::after' would have
       100% of the width of the button */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated::after {
    /*
    animation: 'animation_name' 'animation_duration'
    'animation_timing_function' 'animation_delay'
    */
    animation: moveInBottom .5s ease-out .75;
    /*
    b/c initially stays visibile and then animation
    starts, automatically applies styles at 0% before
    animation starts
    */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 1rem;
    z-index: 3;
    transition: all .2s;
    /*
       places images according to a reference. This reference
       is the first parent that isset to something.

       In this case, we want the reference to be the composition
       so we want it positioned to the composition element, we set
       the position of the composition element to relative

       Absolute sets images at initial point of (0,0), the
       top left corner of the element is the origin
       (Lecture 37 - 6:50)
    */
    position: absolute; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 4; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 2rem; }
  .row .col-1-of-2 {
    width: calc((100% - 2rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 2rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 2rem) / 3) + 2rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 2rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 2rem) / 4) + 2rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 2rem) / 4) + 2 * 2rem); }

/*
height - header element should be 95% of
viewport height
cover - background image will cover entire
viewport of that element
top - Top of background image stays
proportionally the same (anchored).  The
bottom may be cropped
*/
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(40, 180, 133, 0.3), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  background-position: center;
  clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  position: relative;
  /* '&' used to copy part of a selector,
     and used for nesting
     In this case, & = ".header" */ }
  .header__logo-box {
    /*
    absolute - Position allows movement of
    elements across page/within elements
      - Top, left, right, bottom
      - 40px start point (origin/ref) is a parent
        element that has its position set
        to relative --> .header: relative
                    --> .logo-box: absolute
    */
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    text-align: center;
    /*
    translate - operates relative to element itself,
    not in relation to parent element. Ensures element
    is exactly centered
      - half of the width to the left side
      = half of the height to the top
    */
    transform: translate(-50%, -50%); }

/* section-about and heading-secondary is specific
   to the home page */
.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
